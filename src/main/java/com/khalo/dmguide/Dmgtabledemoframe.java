/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.khalo.dmguide;
import com.khalo.dmguide.dmgtables.*;

/**
 *
 * @author jagermeister
 */
public class Dmgtabledemoframe extends javax.swing.JFrame {

    /**
     * Creates new form Dmgtabledemoframe
     */
    public Dmgtabledemoframe() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jFrame1 = new javax.swing.JFrame();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        DMGTableList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        DMGTable = new javax.swing.JTable();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setBorder(new javax.swing.border.MatteBorder(null));
        jSplitPane1.setDividerLocation(201);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1200, 1200));
        jSplitPane1.setRequestFocusEnabled(false);

        DMGTableList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Acquisition of Initial Spells", "Adjustments to Occurrence andSeverity of Diease", "Aerial Combat Charts", "Age Categories Table", "Alphabetical Recapitulation of Monsters (With Experience Point Values)", "Armor Damage to Lycanthropes Changing Shape", "Artifacts & Relics Powers/Effects Tables", "Assassin Spying Table", "Assassins' Table for Assassinations", "Astral & Ethereal Encounters", "Attack Matrices", "Attack Matrix for Monsters", "Base Value of Gems", "Base Value of Jewelry", "Bell Curve", "Boot Hill-AD&D Character Conversions", "Boot Hill-AD&D Combat Conversions", "Castle Tables", "Chance of Contracting Disease", "Chance of Discovering Natural Cave Area", "Chance of Parasitic Infestation", "Chance of Becoming Lost", "City/Town Encounter Matrix", "Combat Sequence", "Conjured Animals Table", "Construction Defensive Values", "Construction Times", "Cost of constructions", "Cost of Holy/Unholy Water Receptacles", "Cost of Siege Engines", "Cost of Spells Cast By Non-Player Characters", "Creatures Struck Only by Magical Weapons", "Detection of Invisibility Table", "Disease (Or Disorder) Table", "Dungeon Dressing", "Dungeon Random Monster Level Determination Matrix", "Dungeon Random Monster Tables", "Encounter Reactions", "Encumbrance of Standard Items", "Evasion of Pursuit Outdoors", "Experience Points Table", "Expert Hirelings Cost Table", "Followers for Clerics", "Followers for Fighters", "Followers for Rangers", "Followers for Thieves", "Followers for Assassins", "Frequency of Checks for Encounters", "Gamma World - AD&D Character Conversions", "Gamma World - AD&D Combat Conversions", "Gem Properties", "Gemcutter Skill Level", "Government Forms", "Grappling Tables", "Grenade-like Missiles", "Human Character Age Table", "Humanoid Racial Preferences Table", "Information Discovery Time and Cost Table", "Intoxication Tables", "Jeweler Skill Level", "Linear Curve", "Listening at Doors", "Location of Henchmen", "Loyalty of Henchmen and Allies", "Lycanthropy Change Table", "Magic Possessed by Encountered Creatures", "Matrix for Clerics Affecting Undead", "Maximum Character Age Table", "Mercenary Troop Type Table", "Missile Fire Cover and Concealment Adjustments", "Monks' Stun/Kill Capabilities", "Morale Check Tables", "Movement Afloat", "Multiple Miners", "Multiple Opponent Diagrams", "Naval Combat Charts", "Non-Human Character Age Table", "Non-Player Character Facts and Traits", "Outdoor Movement", "Outdoor Random Monster Encounter Tables", "Overbearing Tables", "Parasitic Infestation Table", "Poisons", "Potion Miscibility Table", "Probability of Control of Non-Human Troops", "Psionic Attack Matrices", "Psionic Encounter Table", "Pummeling Tables", "Random Dungeon Generation Tables", "Random Generation of Creatures from the Lower Planes", "Random Language Determination Table", "Random Treasure Determination Tables", "Reputed Magical Properties of Gems", "Royal and Noble Titles", "Sage's Chance of Knowing Answer to Questions", "Sage's Fields of Study", "Saving Throw Matrices", "Secondary Skills Table", "Siege Attack Values", "Siege Engines and Devices of War Defensive Values", "Special \"to Hit\" Bonuses", "Spy Failure Table", "Standard Hirelings Cost Table", "Suggested Special Ingredients for Potions", "Summoned Monsters Tables", "Surprise", "Trap List", "Types of Armor & Encumbrance", "Types of Insanity", "Typical Inhabitants", "Underwater Random Monster Tables", "Underwater Spell Use", "Unusual Swords", "Values of Other Rare Commodities", "Volume of Roack Mined (By Race)", "Wall Climbing Table", "War Machine Fire Tables", "Waterborne Random Monster Encounter Tables", "Wind Direction and Force" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        DMGTableList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DMGTableList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                DMGTableListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(DMGTableList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        DMGTable.setModel(new blahblahblahTable());
        DMGTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        DMGTable.setFillsViewportHeight(true);
        DMGTable.setRowSelectionAllowed(true);
        DMGTable.setShowGrid(false);
        jScrollPane2.setViewportView(DMGTable);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DMGTableListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_DMGTableListValueChanged
        // TODO add your handling code here:
        String choice=DMGTableList.getModel().getElementAt(DMGTableList.getSelectedIndex());
        System.out.println(choice);
        switch (choice){
            case "Acquisition of Initial Spells":{
                DMGTable.setModel(new dmg_tbl_initial_spells());
                break;
            }
            case "Non-Human Character Age Table":{
                DMGTable.setModel(new dmg_tbl_NonHumanCharacterAge());
                break;
            }
            case "Secondary Skills Table":{
                DMGTable.setModel(new SecondarySkillsTable());
                break;
            }
            case "Adjustments to Occurrence andSeverity of Diease":{
                DMGTable.setModel(new AOSDTable());
                break;
            }
            case "Aerial Combat Charts":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Age Categories Table":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Alphabetical Recapitulation of Monsters (With Experience Point Values)":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Armor Damage to Lycanthropes Changing Shape":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Artifacts & Relics Powers/Effects Tables":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Assassin Spying Table":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Assassins' Table for Assassinations":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Astral & Ethereal Encounters":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Attack Matrices":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Attack Matrix for Monsters":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Base Value of Gems":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Base Value of Jewelry":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Bell Curve":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Boot Hill-AD&D Character Conversions":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Boot Hill-AD&D Combat Conversions":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Castle Tables":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Chance of Contracting Disease":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Chance of Discovering Natural Cave Area":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Chance of Parasitic Infestation":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Chance of Becoming Lost":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "City/Town Encounter Matrix":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Combat Sequence":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            case "Conjured Animals Table":{
                DMGTable.setModel(new blahblahblahTable());
                break;
            }
            default: DMGTable.setModel(new blahblahblahTable());
            

                    }
        
    }//GEN-LAST:event_DMGTableListValueChanged

    /**
     * @param args the command line arguments
     */

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dmgtabledemoframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dmgtabledemoframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dmgtabledemoframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dmgtabledemoframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dmgtabledemoframe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DMGTable;
    private javax.swing.JList<String> DMGTableList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
